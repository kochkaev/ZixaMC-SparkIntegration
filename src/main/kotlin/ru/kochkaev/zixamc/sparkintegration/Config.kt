package ru.kochkaev.zixamc.sparkintegration

import net.fabricmc.loader.api.FabricLoader
import org.apache.commons.io.IOUtils
import org.apache.commons.lang3.exception.ExceptionUtils
import ru.kochkaev.zixamc.tgbridge.config.ConfigManager
import ru.kochkaev.zixamc.tgbridge.config.GsonManager.gson
import ru.kochkaev.zixamc.tgbridge.config.TextData
import java.io.File
import java.io.FileOutputStream
import java.nio.charset.StandardCharsets

data class Config (
    val featureName: String = "Spark Integration",
    val featureDescription: String = "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–æ–ø–∏–∫ –æ—Ç—á—ë—Ç –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.",
    val featureOnDone: String = "<b>–ì–æ—Ç–æ–≤–æ!</b> üéâ\n–¢–µ–ø–µ—Ä—å, –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –≤—ã –±—É–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
    val featureOptions: String = "¬ª ID —Ç–æ–ø–∏–∫–∞ -> <code>{topicId}</code>",
    val outOfMemoryReport: String = "<b>Out of memory report!</b>\nServer will be automatically saved and stopped.\n\nHeap dump was saved to <code>./spark_heapdumps/{filename}</code> on server.",
    val outOfMemorySay: TextData = TextData("[<red>–û–±—ä—è–≤–ª–µ–Ω–∏–µ</red>] Server ¬ª –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫..."),
    val outOfMemoryKickReason: TextData = TextData("–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫..."),
    val outOfMemorySayTelegram: String = "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...",
    val memoryThreshold: Float = 0.9F,
    val millisecondsPerTick: Long = 60000,
    val delayBeforeStop: Long = 5000,
) {
    companion object {
        lateinit var config: Config
            private set
        private val file = File(FabricLoader.getInstance().configDir.toFile(), "ZixaMCSparkIntegration.json")
        fun init() {
            ConfigManager.init(file, Config::class.java, ::Config, Config::config) { new -> new?.let { config = it } }
        }
        fun load() {
            ConfigManager.load(file, Config::class.java)
        }
        fun update() {
            ConfigManager.update(file, config)
        }
    }
}
